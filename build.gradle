plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "5.0.0.4638"
}

group = 'org.sparta'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'org.sonarqube'

    sonar {
        properties {
            property 'sonar.java.binaries', "${buildDir}/classes"
            // jacoco-aggregation을 사용하지 않은 경우 각 프로젝트의 buildDir마다 따로 적용
            property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco.xml"
        }
    }
}

def QDomains = []
for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
    QDomains.add(qPattern + '*')
}
def jacocoExcludePatterns = [
        // 측정 안하고 싶은 패턴
        "**/*Application*",
        "**/*Config*",
        "**/*Aop*",
        "**/*Exception*",
        "**/*Request*",
        "**/*Response*",
        "**/*Dto*",
        "**/*Interceptor*",
        "**/*Filter*",
        "**/*Resolver*",
        "**/*Entity*",
        "**/test/**",
        "**/resources/**"
]

sonar {
    properties {
        property "sonar.projectKey", "final17_project-w"
        property "sonar.organization", "final17"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.exclusions', jacocoExcludePatterns.join(',')
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test	// 테스트가 수행되어야만 report를 생성할 수 있도록 설정
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: jacocoExcludePatterns + QDomains) // Querydsl 관련 제거
                })
        )
    }
    //   finalizedBy jacocoTestCoverageVerification
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.5'

    // bcrypt
    implementation 'at.favre.lib:bcrypt:0.10.2'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    // logstash 추가
    implementation 'net.logstash.logback:logstash-logback-encoder:7.3'

    // actuator 추가
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // prometheus 추가
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //Slack API
    implementation("com.slack.api:bolt:1.43.1")
    implementation("com.slack.api:bolt-servlet:1.43.1")
    implementation("com.slack.api:bolt-jetty:1.43.1")
    implementation("org.slf4j:slf4j-simple:1.7.36")
    implementation 'org.json:json:20190722'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.27.0'
}

tasks.named('test') {
    useJUnitPlatform()
}
